{"version":3,"file":"static/js/958.d09cd718.chunk.js","mappings":"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","sources":["places/pages/NewPlaces.js","shared/hooks/http-hooks.js","shared/validationTextField.js"],"sourcesContent":["import React, { useContext, useState } from \"react\"\nimport Button from \"@mui/material/Button\"\nimport TextField from \"@mui/material/TextField\"\nimport Box from \"@mui/material/Box\"\nimport Typography from \"@mui/material/Typography\"\nimport Container from \"@mui/material/Container\"\nimport { Alert, AlertTitle, Card, CircularProgress } from \"@mui/material\"\nimport { useNavigate } from \"react-router-dom\"\nimport { useHttpClient } from \"../../shared/hooks/http-hooks\"\nimport { AuthContext } from \"../../shared/context/auth-context\"\nimport { validationTexfieldAddPlace } from \"../../shared/validationTextField\"\n\nexport default function NewPlaces() {\n  const [file, setFile] = useState()\n  const [isLoading, setIsLoading] = useState(false)\n  const [validation, setValidation] = useState({\n    title: {\n      error: false,\n      message: \"\",\n    },\n    address: {\n      error: false,\n      message: \"\",\n    },\n    description: {\n      error: false,\n      message: \"\",\n    },\n  })\n  const navigate = useNavigate()\n  const { sendRequest, error, setError } = useHttpClient()\n  const auth = useContext(AuthContext)\n  const handleSubmit = async (event) => {\n    event.preventDefault()\n    const data = new FormData(event.currentTarget)\n\n    const { updatedValue, errorValidate } = validationTexfieldAddPlace(\n      data.get(\"title\"),\n      data.get(\"address\"),\n      data.get(\"description\"),\n      data.get(\"image\")\n    )\n    if (errorValidate) {\n      setError(\"something wrong please check your image\")\n      setValidation(updatedValue)\n    } else {\n      try {\n        setIsLoading(true)\n        await sendRequest(\"https://cute-plum-cobra.cyclic.app/api/places\", \"post\", data, {\n          Authorization: `Bearer ${auth.token}`,\n        })\n        navigate(`/${auth.userId}/places`)\n        setIsLoading(false)\n      } catch (err) {}\n    }\n  }\n\n  const pickHandler = (event) => {\n    const fileImage = event.target.files[0]\n    const reader = new FileReader()\n    reader.onload = () => {\n      setFile(reader.result)\n    }\n    reader.readAsDataURL(fileImage)\n  }\n  return (\n    <>\n      {error && (\n        <Container sx={{ my: 4, display: \"flex\", justifyContent: \"center\" }}>\n          <Alert severity=\"error\" variant=\"filled\" sx={{ width: \"40%\" }}>\n            <AlertTitle>Error</AlertTitle>\n            {error} â€” <strong>check it out!</strong>\n          </Alert>\n        </Container>\n      )}\n      {isLoading ? (\n        <Container sx={{ my: 4, display: \"flex\", justifyContent: \"center\" }}>\n          <CircularProgress />\n        </Container>\n      ) : (\n        <Container component=\"main\" maxWidth=\"sm\">\n          <Card\n            sx={{\n              display: \"flex\",\n              alignItems: \"center\",\n              flexDirection: \"column\",\n            }}\n          >\n            <Typography component=\"h1\" variant=\"h4\" fontWeight=\"bold\">\n              Add Place\n            </Typography>\n            {file && <img src={file} alt=\"\" height={200} />}\n            <Box component=\"form\" onSubmit={handleSubmit} noValidate sx={{ width: \"80%\" }}>\n              <Typography variant=\"body1\" fontWeight=\"bold\">\n                Title\n              </Typography>\n              <TextField\n                error={validation.title.error}\n                helperText={validation.title.message}\n                margin=\"normal\"\n                required\n                fullWidth\n                id=\"title\"\n                name=\"title\"\n              />\n              <Typography variant=\"body1\" fontWeight=\"bold\">\n                Address\n              </Typography>\n              <TextField\n                error={validation.address.error}\n                helperText={validation.address.message}\n                margin=\"normal\"\n                required\n                fullWidth\n                name=\"address\"\n                id=\"address\"\n              />\n              <Typography variant=\"body1\" fontWeight=\"bold\">\n                description\n              </Typography>\n              <TextField\n                error={validation.description.error}\n                helperText={validation.description.message}\n                margin=\"normal\"\n                required\n                fullWidth\n                name=\"description\"\n                id=\"description\"\n                multiline\n                rows={4}\n              />\n              <TextField type=\"file\" id=\"image\" name=\"image\" onChange={pickHandler} />\n\n              <Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n                sx={{ mt: 3, mb: 2, bgcolor: \"orange\" }}\n              >\n                Create Place\n              </Button>\n            </Box>\n          </Card>\n        </Container>\n      )}\n    </>\n  )\n}\n","import axios from \"axios\"\nimport { useCallback, useState } from \"react\"\n\nexport const useHttpClient = () => {\n  const [isLoading, setIsLoading] = useState(true)\n  const [error, setError] = useState()\n\n  const sendRequest = useCallback(async (url, method = \"get\", body = {}, head = {}) => {\n    try {\n      const response = await axios({ method, url, data: body, headers: head })\n      return response.data\n    } catch (err) {\n      var data = err.response ? err.response.data.message : err.message\n      setError(data)\n      setIsLoading(false)\n      throw err\n    }\n  }, [])\n\n  return { isLoading, error, sendRequest, setIsLoading, setError }\n}\n","export const validationLogin = (email, password) => {\n  let val = {\n    email: {\n      error: false,\n      message: \"\",\n    },\n    password: {\n      error: false,\n      message: \"\",\n    },\n  }\n\n  if (!email) {\n    val.email.error = true\n    val.email.message = \"email must not empty\"\n  } else if (!email.includes(\"@\")) {\n    val.email.error = true\n    val.email.message = \"please use valid email\"\n  }\n  if (!password) {\n    val.password.error = true\n    val.password.message = \"password must not empty\"\n  } else if (password.length < 6) {\n    val.password.error = true\n    val.password.message = \"min character length 6\"\n  }\n\n  if (!val.email.error && !val.email.password) {\n    val = {\n      email: {\n        error: false,\n        message: \"\",\n      },\n      password: {\n        error: false,\n        message: \"\",\n      },\n    }\n  }\n  return { updatedValue: val, errorValidate: val.email.error || val.password.error }\n}\nexport const validationTexfieldAddPlace = (title, address, description, image) => {\n  let val = {\n    title: {\n      error: false,\n      message: \"\",\n    },\n    address: {\n      error: false,\n      message: \"\",\n    },\n    description: {\n      error: false,\n      message: \"\",\n    },\n    image: {\n      error: false,\n      message: \"\",\n    },\n  }\n\n  if (!title) {\n    val.title.error = true\n    val.title.message = \"title must not empty\"\n  }\n  if (!description) {\n    val.description.error = true\n    val.description.message = \"description must not empty\"\n  } else if (description.length < 10) {\n    console.log(description)\n    val.description.error = true\n    val.description.message = \"min character length 10\"\n  }\n  if (!address) {\n    val.address.error = true\n    val.address.message = \"address must not empty\"\n  }\n  if (!image) {\n    val.image.error = true\n    val.image.message = \"image must filled\"\n  }\n\n  if (!val.title.error && !val.description.error && !val.address.error) {\n    val = {\n      title: {\n        error: false,\n        message: \"\",\n      },\n      address: {\n        error: false,\n        message: \"\",\n      },\n      description: {\n        error: false,\n        message: \"\",\n      },\n      image: {\n        error: false,\n        message: \"\",\n      },\n    }\n  }\n  return {\n    updatedValue: val,\n    errorValidate: val.address.error || val.title.error || val.description.error,\n  }\n}\n\nexport const validationRegister = (name, email, password, confirmPassword, image) => {\n  let val = {\n    email: {\n      error: false,\n      message: \"\",\n    },\n    password: {\n      error: false,\n      message: \"\",\n    },\n    name: {\n      error: false,\n      message: \"\",\n    },\n    confirmPassword: {\n      error: false,\n      message: \"\",\n    },\n    image: {\n      error: false,\n      message: \"\",\n    },\n  }\n  if (!email) {\n    val.email.error = true\n    val.email.message = \"email must not empty\"\n  } else if (!email.includes(\"@\")) {\n    val.email.error = true\n    val.email.message = \"please use valid email\"\n  }\n  if (!name) {\n    val.name.error = true\n    val.name.message = \"name must not empty\"\n  }\n  if (!confirmPassword) {\n    val.confirmPassword.error = true\n    val.confirmPassword.message = \"confirm password must not empty\"\n  } else if (confirmPassword !== password) {\n    val.confirmPassword.error = true\n    val.confirmPassword.message = \"confirm password does not match\"\n  }\n\n  if (!password) {\n    val.password.error = true\n    val.password.message = \"password must not empty\"\n  } else if (password.length < 6) {\n    val.password.error = true\n    val.password.message = \"min character length 6\"\n  }\n\n  if (!image) {\n    val.image.error = true\n    val.image.message = \"image must Filled\"\n  }\n\n  if (!val.name.error && !val.email.error && !val.password.error && !val.confirmPassword.error) {\n    val = {\n      email: {\n        error: false,\n        message: \"\",\n      },\n      password: {\n        error: false,\n        message: \"\",\n      },\n      name: {\n        error: false,\n        message: \"\",\n      },\n      confirmPassword: {\n        error: false,\n        message: \"\",\n      },\n      image: {\n        error: false,\n        message: \"\",\n      },\n    }\n  }\n  return {\n    updatedValue: val,\n    errorValidate:\n      val.email.error || val.password.error || val.name.error || val.confirmPassword.error,\n  }\n}\n"],"names":["NewPlaces","_useState","useState","_useState2","_slicedToArray","file","setFile","_useState3","_useState4","isLoading","setIsLoading","_useState5","title","error","message","address","description","_useState6","validation","setValidation","navigate","useNavigate","_useHttpClient","useHttpClient","sendRequest","setError","auth","useContext","AuthContext","handleSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","event","data","_validationTexfieldAd","updatedValue","wrap","_context","prev","next","preventDefault","FormData","currentTarget","validationTexfieldAddPlace","get","errorValidate","Authorization","concat","token","userId","t0","stop","_x","apply","arguments","_jsxs","_Fragment","children","_jsx","Container","sx","my","display","justifyContent","Alert","severity","variant","width","AlertTitle","CircularProgress","component","maxWidth","Card","alignItems","flexDirection","Typography","fontWeight","src","alt","height","Box","onSubmit","noValidate","TextField","helperText","margin","required","fullWidth","id","name","multiline","rows","type","onChange","fileImage","target","files","reader","FileReader","onload","result","readAsDataURL","Button","mt","mb","bgcolor","useCallback","url","method","body","head","response","_args","length","undefined","axios","headers","sent","abrupt","validationLogin","email","password","val","includes","image","console","log","validationRegister","confirmPassword"],"sourceRoot":""}